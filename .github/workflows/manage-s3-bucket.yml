# name: Manage EKS Cluster

# on:
#   workflow_dispatch:
#     inputs:
#       clusterName:
#         description: 'Name of the EKS cluster'
#         required: true
#       awsRegion:
#         description: 'AWS Region for the cluster'
#         required: true
#       action:
#         description: 'Action to perform (apply/destroy)'
#         required: true
#       awsAccessKeyId:
#         description: 'AWS Access Key ID'
#         required: true
#       awsSecretAccessKey:
#         description: 'AWS Secret Access Key'
#         required: true
#       awsSessionToken:
#         description: 'AWS Session Token'
#         required: true

# jobs:
#   apply_cluster:
#     runs-on: ubuntu-latest
#     if: ${{ github.event.inputs.action == 'apply' }}
#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v2
    
#     - name: Configure AWS credentials
#       uses: aws-actions/configure-aws-credentials@v1
#       with:
#         aws-access-key-id: ${{ github.event.inputs.awsAccessKeyId }}
#         aws-secret-access-key: ${{ github.event.inputs.awsSecretAccessKey }}
#         aws-session-token: ${{ github.event.inputs.awsSessionToken }}
#         aws-region: ${{ github.event.inputs.awsRegion }}
    
#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v1
    
#     - name: Terraform Init with upgrade
#       run: terraform init -upgrade
#       working-directory: Terraform
    
#     - name: Terraform Format
#       run: terraform fmt
#       working-directory: Terraform
    
#     - name: Terraform Validate
#       run: terraform validate
#       working-directory: Terraform
    
#     - name: Terraform Apply
#       run: terraform apply -var clusterName=${{ github.event.inputs.clusterName }} -var awsRegion=${{ github.event.inputs.awsRegion }} -auto-approve
#       working-directory: Terraform

#   destroy_cluster:
#     runs-on: ubuntu-latest
#     if: ${{ github.event.inputs.action == 'destroy' }}
#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v2
    
#     - name: Configure AWS credentials
#       uses: aws-actions/configure-aws-credentials@v1
#       with:
#         aws-access-key-id: ${{ github.event.inputs.awsAccessKeyId }}
#         aws-secret-access-key: ${{ github.event.inputs.awsSecretAccessKey }}
#         aws-session-token: ${{ github.event.inputs.awsSessionToken }}
#         aws-region: ${{ github.event.inputs.awsRegion }}
    
#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v1
    
#     - name: Terraform Init
#       run: terraform init
#       working-directory: Terraform
    
#     - name: Terraform FMT
#       run: terraform fmt
#       working-directory: Terraform
    
#     - name: Terraform Validate
#       run: terraform validate
#       working-directory: Terraform
    
#     - name: Terraform Destroy
#       run: terraform destroy -var clusterName=${{ github.event.inputs.clusterName }} -var awsRegion=${{ github.event.inputs.awsRegion }} -auto-approve
#       working-directory: Terraform


name: Manage S3 Bucket with CDK Python

on:
  workflow_dispatch:
    inputs:
      bucketName:
        description: 'Name of the S3 bucket'
        required: true
      awsRegion:
        description: 'AWS Region for the bucket'
        required: true
      action:
        description: 'Action to perform (deploy/destroy)'
        required: true
      awsAccessKeyId:
        description: 'AWS Access Key ID'
        required: true
      awsSecretAccessKey:
        description: 'AWS Secret Access Key'
        required: true
      awsSessionToken:
        description: 'AWS Session Token'
        required: true

jobs:
  deploy_bucket:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.action == 'deploy' }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ github.event.inputs.awsAccessKeyId }}
        aws-secret-access-key: ${{ github.event.inputs.awsSecretAccessKey }}
        aws-session-token: ${{ github.event.inputs.awsSessionToken }}
        aws-region: ${{ github.event.inputs.awsRegion }}
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
    
    - name: Install CDK CLI
      run: npm install -g aws-cdk
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r cdk_python/requirements.txt
        pip install aws-cdk-lib
    
    - name: CDK Bootstrap
      run: npx cdk bootstrap
      working-directory: cdk_python
      env:
        BUCKET_NAME: ${{ github.event.inputs.bucketName }}
        AWS_REGION: ${{ github.event.inputs.awsRegion }}
    
    - name: CDK Deploy
      run: npx cdk deploy --all --require-approval never
      working-directory: cdk_python
      env:
        BUCKET_NAME: ${{ github.event.inputs.bucketName }}
        AWS_REGION: ${{ github.event.inputs.awsRegion }}

  destroy_bucket:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.action == 'destroy' }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ github.event.inputs.awsAccessKeyId }}
        aws-secret-access-key: ${{ github.event.inputs.awsSecretAccessKey }}
        aws-session-token: ${{ github.event.inputs.awsSessionToken }}
        aws-region: ${{ github.event.inputs.awsRegion }}
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
    
    - name: Install CDK CLI
      run: npm install -g aws-cdk
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r cdk_python/requirements.txt
        pip install aws-cdk-lib
    
    - name: CDK Destroy
      run: npx cdk destroy --all --force
      working-directory: cdk_python
      env:
        BUCKET_NAME: ${{ github.event.inputs.bucketName }}
        AWS_REGION: ${{ github.event.inputs.awsRegion }}